{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { sync as mkdirp } from 'mkdirp';\nimport { sync as rimraf } from 'rimraf';\nimport { execSync, spawn } from 'child_process';\nimport extend = require('xtend');\nimport * as ts from 'typescript';\nimport astring = require('astring');\n\nimport extractFromTSX from './extractFromTSX';\nimport { buildXML, createAppJson, createWorkspaceJson } from './artifacts';\n\nlet watching = false;\n\nlet defaultOptions = {\n  builds: {},\n  debug: false,\n  watch: false,\n  test: /\\.tsx?$/,\n  /* begin single build only */\n  output: 'extjs',\n  sdk: '',\n  toolkit: 'modern',\n  theme: 'theme-triton',\n  packages: []\n  /* end single build only */\n}\n\n/**\n * Produces a minimal build of the Ext JS framework by crawling your React source code and extracting the xtypes used\n * in JSX tags\n */\nexport default class ReactExtJSWebpackTSPlugin {\n  options: any\n  dependencies = {}\n  currentFile: string\n\n  /**\n   * @param {Object[]} builds\n   * @param {Boolean} [debug=false] Set to true to prevent cleanup of build temporary build artifacts that might be helpful in troubleshooting issues.\n   * @param {String} sdk The full path to the Ext JS SDK\n   * @param {String} [toolkit='modern'] \"modern\" or \"classic\"\n   * @param {String} theme The name of the Ext JS theme package to use, for example \"theme-material\"\n   * @param {String[]} packages An array of Ext JS packages to include\n   * @param {String} output The path to directory where the Ext JS bundle should be written\n   */\n  constructor(options = {}) {\n    this.options = extend(options, defaultOptions, options);\n\n    if (Object.keys(this.options.builds).length === 0) {\n      const { sdk, toolkit, theme, packages, output } = this.options;\n      this.options.builds.ext = { sdk, toolkit, theme, packages, output };\n    }\n\n    for (let name in this.options.builds) {\n      this._validateBuildConfig(name, this.options.builds[name]);\n    }\n  }\n\n  apply(compiler) {\n    compiler.plugin('watch-run', (watching, cb) => {\n      this.options.watch = true;\n      cb();\n    });\n\n    // extract xtypes from JSX tags\n    compiler.plugin('compilation', (compilation, params) => {\n      compilation.plugin('build-module', (module) => {\n        this.currentFile = module.resource;\n\n        if (module.resource && module.resource.match(this.options.test)) {\n          try {\n            if (this.options.debug) {\n              console.log(module.resource);\n            }\n            const contents = fs.readFileSync(module.resource, 'utf8');\n\n            // TODO: Make scriptTarget part of option.\n            const statements = extractFromTSX(contents, ts.ScriptTarget.ES2016);\n            // console.log(this.currentFile, statements)\n            this.dependencies[this.currentFile] = statements;\n          }\n          catch (e) {\n            console.error('error parsing ' + this.currentFile);\n          }\n        }\n      });\n    });\n\n    const me = this;\n\n    /**\n     * Adds the code for the specified function call to the manifest.js file\n     * @param {Object} call A function call AST node.\n     */\n    const addToManifest = function (call) {\n      let file;\n      try {\n        file = this.state.module.resource;\n        let deps = me.dependencies[file];\n        if (!deps) {\n          deps = me.dependencies[file] = [];\n        }\n        deps.push(astring(call));\n      }\n      catch (e) {\n        console.error(`Error processing ${file}, ${e}`);\n      }\n    };\n\n    // extract xtypes and classes from Ext.create calls\n    compiler.parser.plugin('call Ext.create', addToManifest);\n\n    // copy Ext.require calls to the manifest.  This allows the users to explicitly require a class if the plugin fails to detect it.\n    compiler.parser.plugin('call Ext.require', addToManifest);\n\n    // copy Ext.define calls to the manifest.  This allows users to write standard Ext JS classes.\n    compiler.parser.plugin('call Ext.define', addToManifest);\n\n    // once all modules are processed, create the optimized Ext JS build.\n    compiler.plugin('emit', (compilation, callback) => {\n      const modules = compilation.chunks.reduce((a, b) => a.concat(b.modules), []);\n      const build = this.options.builds[Object.keys(this.options.builds)[0]];\n      let outputPath = path.join(compiler.outputPath, this.options.output);\n\n      // webpack-dev-server overwrites the outputPath to \"/\", so we need to prepend contentBase\n      if (compiler.outputPath === '/' && compiler.options.devServer) {\n        outputPath = path.join(compiler.options.devServer.contentBase, outputPath);\n      }\n      console.log(`outputPath: ${outputPath}`)\n      this._buildExtBundle('ext', modules, outputPath, build)\n        .then(() => {\n          // the following is needed for html-webpack-plugin to include <script> and <link> tags for Ext JS\n          const jsChunk = compilation.addChunk(`${this.options.output}-js`);\n          jsChunk.initial = true;\n          jsChunk.ids = [0]; // html-webpack-plugin needs ids to be defined so that it can fetch webpack stats\n          jsChunk.files.push(path.join(this.options.output, 'ext.js'));\n          jsChunk.files.push(path.join(this.options.output, 'ext.css'));\n\n          // this forces html-webpack-plugin to include ext.js first\n          jsChunk.entry = true;\n          jsChunk.id = 9999;\n\n          callback();\n        })\n        .catch(e => callback(e || new Error('Error building Ext JS bundle')));\n    });\n  }\n\n  /**\n   * Checks each build config for missing/invalid properties\n   * @param {String} name The name of the build\n   * @param {String} build The build config\n   * @private\n   */\n  _validateBuildConfig(name, build) {\n    const { sdk } = build;\n    if (!sdk) {\n      throw new Error(`Missing required option sdk in build ${name}.  This must be the path to your Ext JS SDK.`);\n    }\n  }\n\n  /**\n   * Builds a minimal version of the Ext JS framework based on the classes used\n   * @param {String} name The name of the build\n   * @param {Module[]} modules webpack modules\n   * @param {String} output The path to where the framework build should be written\n   * @param {String} [toolkit='modern'] \"modern\" or \"classic\"\n   * @param {String} output The path to the directory to create which will contain the js and css bundles\n   * @param {String} theme The name of the Ext JS theme package to use, for example \"theme-material\"\n   * @param {String[]} packages An array of Ext JS packages to include\n   * @param {String} sdk The full path to the Ext JS SDK\n   * @private\n   */\n  _buildExtBundle(name, modules, output, { toolkit = 'modern', theme, packages = [], sdk }) {\n    return new Promise((resolve, reject) => {\n      console.log(`\\nbuilding Ext JS bundle: ${name} => ${output}`);\n\n      if (!watching) {\n        rimraf(output);\n        mkdirp(output);\n      }\n\n      let statements = ['Ext.require(\"Ext.Component\")']; // for some reason command doesn't load component when only panel is required\n\n      for (let module of modules) {\n        const deps = this.dependencies[module.resource];\n        if (deps) {\n          statements = statements.concat(deps);\n        }\n      }\n\n      const js = statements.join(';\\n');\n      const manifest = path.join(output, 'manifest.js');\n\n      fs.writeFileSync(manifest, js, 'utf8');\n\n      if (!watching) {\n        fs.writeFileSync(path.join(output, 'build.xml'), buildXML, 'utf8');\n        fs.writeFileSync(path.join(output, 'app.json'), createAppJson({ theme, packages, toolkit }), 'utf8');\n        fs.writeFileSync(path.join(output, 'workspace.json'), createWorkspaceJson(path.resolve(sdk)), 'utf8');\n      }\n\n      if (this.options.watch) {\n        if (!watching) {\n          const watching = spawn('sencha', ['ant', 'watch'], { cwd: output });\n          watching.stdout.pipe(process.stdout);\n          watching.stdout.on('data', data => {\n            if (data.toString().match(/Waiting for changes\\.\\.\\./)) {\n              resolve(output);\n            }\n          });\n          watching.on('exit', code => reject())\n        }\n      }\n      else {\n        execSync('sencha ant build', { cwd: output, stdio: 'inherit' });\n        resolve(output);\n      }\n    });\n  }\n};\n"]}