{"version":3,"file":"extractFromTSX.spec.js","sourceRoot":"","sources":["../src/extractFromTSX.spec.ts"],"names":[],"mappings":";AAAA,2BAAsB;AACtB,yCAAyC;AACzC,mDAA6C;AAE7C,aAAI,CAAC,0BAA0B,EAAE,UAAA,CAAC;IAChC,IAAM,MAAM,GAAG,sPAWhB,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QAClB,yCAAyC;QACzC,0CAA0C;KAC3C,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,oBAAoB,EAAE,UAAA,CAAC;IAC1B,IAAM,MAAM,GAAE,kZAcf,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QACpB,6DAAyD;KACxD,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAA,CAAC;IAChB,IAAM,MAAM,GAAG,kTAMhB,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAE1D,kCAAkC;IAClC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QACpB,wIAAoI;KACnI,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,0BAA0B,EAAE,UAAA,CAAC;IAChC,IAAM,MAAM,GAAG,qMAMhB,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QAClB,yDAAyD;KAC1D,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,gCAAgC,EAAE,UAAA,CAAC;IACtC,IAAM,MAAM,GAAG,8JAKhB,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QAClB,6BAA6B;QAC7B,8BAA8B;KAC/B,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,2DAA2D,EAAE,UAAA,CAAC;IACjE,IAAM,MAAM,GAAG,oCAEhB,CAAA;IACC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AACxB,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,4DAA4D,EAAE,UAAA,CAAC;IAClE,IAAM,MAAM,GAAG,yBAAyB,CAAA;IACxC,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AACxB,CAAC,CAAC,CAAA;AAEF,aAAI,CAAC,gCAAgC,EAAE,UAAA,CAAC;IACtC,IAAM,MAAM,GAAG,gGAGd,CAAA;IACD,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,EAAE,yBAAY,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE;QAClB,6BAA6B;QAC7B,8BAA8B;KAC/B,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import test from 'ava'\nimport { ScriptTarget } from 'typescript'\nimport extractFromTSX from './extractFromTSX'\n\ntest('import declaration basic', t => {\n  const source = `\nimport { reactify } from '@extjs/reactor'\nconst Grid = reactify<any, any>('grid')\nconst Panel = reactify('panel')\nconst [ X, Y ] = reactify('grid', 'panel')\n\nclass ABC {\n  render() {\n    return <X abc='def'><Y def='123'/></X>\n  }\n}\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.deepEqual(actual, [\n    'Ext.create({xtype: \"grid\", abc: \"def\"})',\n    'Ext.create({xtype: \"panel\", def: \"123\"})'\n  ])\n})\n\ntest('create with as any', t => {\n  const source =`\nimport { reactify } from '@extjs/reactor';\n\nimport data from './data';\nimport Employee from './Employee';\n\nconst Grid = reactify('grid') as any;\nconst Panel = reactify('panel') as any;\nconst Container = reactify('container') as any;\nconst SearchField = reactify('searchfield') as any;\nconst X =  <Container\n                plugins=\"responsive\"\n            >\n            </Container>\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.deepEqual(actual, [\n  `Ext.create({xtype: \"container\", plugins: \"responsive\"})`\n  ])\n})\n\ntest.only('JSX', t=> {\n  const source = `\nimport { reactify } from '@extjs/reactor'\nimport { SomeComponent } from './SomeExtComponent'\nfunction foo() {}\nconst Grid = reactify('grid');\nconst Y = <Grid string=\"foo\", number=1, bool=true, bool2 = false, expression={foo}, object={{x:1,y:2}} array={['a', { text: 'name' }] ref={this.store}/>\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n\n  // expression and ref are skipped.\n  t.deepEqual(actual, [\n  `Ext.create({xtype: \"grid\", string: \"foo\", number: 1, bool: true, bool2: false, object: {x:1,y:2}, array: ['a', { text: 'name' }]})`\n  ])\n})\n\ntest('import with ExtComponent', t => {\n  const source = `\nimport { reactify } from '@extjs/reactor'\nimport { SomeComponent } from './SomeExtComponent'\nfunction foo() {}\nconst MyGrid = reactify(SomeComponent)\nconst Y = <MyGrid doSomething={foo}/>\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.deepEqual(actual, [\n    'Ext.create({xclass: \"SomeComponent\", doSomething: foo})'\n  ])\n})\n\ntest('import declaration with rename', t => {\n  const source = `\nimport { reactify as abc, reactify as def } from '@extjs/reactor'\nconst Grid = abc('grid')\nconst Panel = def('panel')\nconst Y = <Grid><Panel/></Grid>\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.deepEqual(actual, [\n    'Ext.create({xtype: \"grid\"})',\n    'Ext.create({xtype: \"panel\"})'\n  ])\n})\n\ntest('import declaration without named export should do nothing', t => {\n  const source = `\nimport x from '@extjs/reactor'\n`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.is(actual.length, 0)\n})\n\ntest('import declaration with no import clause should do nothing', t => {\n  const source = `import '@extjs/reactor'`\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.is(actual.length, 0)\n})\n\ntest('import module pattern shortcut', t => {\n  const source = `\n  import { Grid, Panel as P } from '@extjs/reactor/modern\n  const Y = <Grid><P/></Grid>\n  `\n  const actual = extractFromTSX(source, ScriptTarget.ES2016)\n  t.deepEqual(actual, [\n    'Ext.create({xtype: \"grid\"})',\n    'Ext.create({xtype: \"panel\"})'\n  ])\n})\n"]}