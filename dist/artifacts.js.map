{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../src/artifacts.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAElB,QAAA,QAAQ,GAAG,gsFA6FvB,CAAC,IAAI,EAAE,CAAC;AAOT,uBAA8B,EAA4B;QAA1B,gBAAK,EAAE,sBAAQ,EAAE,oBAAO;IACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAClB,SAAS,EAAE,KAAK;QAChB,OAAO,SAAA;QACP,KAAK,OAAA;QACL,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE;YACJ,IAAI,EAAE,GAAG;YACT,SAAS,EAAE;gBACP,IAAI,EAAE,aAAa;gBACnB,MAAM,EAAE,aAAa;aACxB;SACJ;KACJ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC;AAdD,sCAcC;AAMD,6BAAoC,GAAG,EAAE,SAAS;IAC9C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAClB,YAAY,EAAE;YACV,KAAK,EAAE,eAAQ,CAAC,SAAS,EAAE,GAAG,CAAC;SAClC;QACD,UAAU,EAAE;YACR,KAAK,EAAE,2DAA2D;YAClE,SAAS,EAAE,kCAAkC;SAChD;KACJ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAChB,CAAC;AAVD,kDAUC","sourcesContent":["import { relative } from 'path'\n\nexport const buildXML = `\n<project name=\"simple-build\" basedir=\".\">\n    <!--  internally, watch calls the init target, so need to have one here -->\n    <target name=\"init\"/>\n    <target name=\"init-cmd\">\n        <taskdef resource=\"com/sencha/ant/antlib.xml\"\n                        classpath=\"\\${cmd.dir}/sencha.jar\"\n                        loaderref=\"senchaloader\"/>\n        <x-extend-classpath>\n            <jar path=\"\\${cmd.dir}/sencha.jar\"/>\n        </x-extend-classpath>\n        <x-sencha-init prefix=\"\"/>\n        <x-compile refid=\"theCompiler\"\n                         dir=\"\\${basedir}\"\n                         initOnly=\"true\"\n                         inheritAll=\"true\">\n                  <![CDATA[\n                  -classpath=\\${basedir}/manifest.js\n                  load-app\n                      -temp=\\${basedir}/temp\n                      -tag=App\n            ]]>\n          </x-compile>\n    </target>\n    <target name=\"build\" depends=\"init-cmd\">\n       <x-compile refid=\"theCompiler\"\n                  dir=\"\\${basedir}\"\n                  inheritAll=\"true\">\n          <![CDATA[\n          exclude\n          -all\n          and\n          include\n          -f=Boot.js\n          and\n          concatenate\n              ext.js\n          and\n          exclude\n          -all\n          and\n          # include all js files needed for manifest.js\n              include\n              -r\n              -f=manifest.js\n          and\n          # exclude the generated manifest file itself,\n          # since we don't want the generated bundle file to create any components\n          exclude\n          -f=manifest.js\n          and\n          concatenate\n          +append\n              ext.js\n          and\n          scss\n              -appName=App\n              -imageSearchPath=resources\n              -themeName=triton\n              -resourceMapBase=.\n              -output=ext.scss\n          and\n          resources\n              -excludes=-all*.css\n              -out=resources\n          and\n          resources\n              -model=true\n              -out=resources\n          ]]>\n       </x-compile>\n       <x-sencha-command dir=\"\\${basedir}\">\n           <![CDATA[\n           fashion\n               -pwd=.\n               -split=4095\n               -compress\n                   ext.scss\n               ext.css\n           then\n           fs\n           minify\n               -yui\n               -from=ext.js\n               -to=ext.js\n           ]]>\n       </x-sencha-command>\n    </target>\n    <target name=\"watch\" depends=\"init-cmd,build\">\n        <x-watch compilerRef=\"theCompiler\"\n                 targets=\"build\"/>\n    </target>\n</project>\n`.trim();\n\n/**\n * Creates the app.json file\n * @param {String} theme The name of the theme to use.\n * @param {String[]} packages The names of packages to include in the build\n */\nexport function createAppJson({ theme, packages, toolkit }) {\n    return JSON.stringify({\n        framework: 'ext',\n        toolkit,\n        theme,\n        requires: packages,\n        output: {\n            base: '.',\n            resources: {\n                path: './resources',\n                shared: './resources'\n            }\n        }\n    }, null, 4);\n}\n\n/**\n * Creates the workspace.json file\n * @param {String} sdk The path to the sdk\n */\nexport function createWorkspaceJson(sdk, outputDir) {\n    return JSON.stringify({\n        'frameworks': {\n            'ext': relative(outputDir, sdk)\n        },\n        'packages': {\n            'dir': '${workspace.dir}/packages/local,${workspace.dir}/packages',\n            'extract': '${workspace.dir}/packages/remote'\n        }\n    }, null, 4);\n}\n"]}